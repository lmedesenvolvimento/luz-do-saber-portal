@mixin baloo_bhaina {
    font-family: 'Baloo Bhaina', Helvetica, sans-serif;
    text-transform: uppercase;
}

@mixin itim_regular {
    font-family: 'Itim Regular', Helvetica, sans-serif;
    text-transform: uppercase;
}

@mixin becca_script {
    font-family: 'Becca & Perry', Helvetica, sans-serif;
}

@mixin pacifico {
    font-family: 'Pacifico', Helvetica, sans-serif;
}

@mixin card_boxshadow {
    box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2),
        0 5px 8px 0 rgba(0, 0, 0, 0.14), 0 1px 14px 0 rgba(0, 0, 0, 0.12);
}

@mixin card_boxshadow_inset {
    box-shadow: inset 0px 0px 24px #999;
}

@mixin embed_image($url, $width, $height) {
    &::before {
        background-repeat: no-repeat;
        background-color: transparent;
        background-image: url($url);
        background-size: $width $height;
        display: inline-block;
        width: $width;
        height: $height;
        content: '';
    }
}

@mixin custom_scroll_bar() {
    &::-webkit-scrollbar {
        width: 7px;
        height: 7px;
    }

    &::-webkit-scrollbar-button {
        width: 0px;
        height: 0px;
    }

    &::-webkit-scrollbar-thumb {
        background: transparentize(#999, 0.5);
        border: 0px none #ffffff;
        border-radius: 50px;
    }

    &::-webkit-scrollbar-thumb:hover {
        background: transparentize(#999, 0.3);
    }

    &::-webkit-scrollbar-thumb:active {
        background: transparentize(#999, 0.1);
    }

    &::-webkit-scrollbar-track {
        background: transparent;
        border: 0px none #ffffff;
        border-radius: 50px;
    }

    &::-webkit-scrollbar-track:hover {
        background: transparent;
    }

    &::-webkit-scrollbar-track:active {
        background: transparent;
    }

    &::-webkit-scrollbar-corner {
        background: transparent;
    }
}

@mixin fill {
    width: 100%;
    height: 100%;
}

@mixin shitzu-porko {
    font-family: 'Shitzu Porko Light', Arial, Helvetica, sans-serif;
}

@mixin custom-card($theme: 'fundamental',$input: false, $size: 'default') {
    $item-types-card-padding: get-value-theme($theme, 'item-types-card-padding');
    $card-input-box-shadow-color: get-value-theme($theme, 'card-input-box-shadow-color');        
    $b-radius: map-get(
        $map: item-types-card-border-radius($theme),
        $key: $size
    );
    
    padding: 8px 0px;

    .card {
        padding: map-get($map: $item-types-card-padding, $key: $size);
        border-radius: calc(#{$b-radius} * 0.8);
        box-shadow: 0px 0px 6px
            transparentize($color: $card-input-box-shadow-color, $amount: 0.1);
        border: 1px solid #fff;
        transition: transform 0.2s ease-in-out;

        .bg-color {
            background: #fff;
            border-radius: calc(#{$b-radius} * 0.8);

            &[style] {
                border-radius: calc(#{$b-radius} * 0.8);
                color: #fff;
            }

            .card-body {
                @include card-body-box-shadow(
                    $card-input-box-shadow-color,
                    0.66
                );
            }
        }

        .card-body {
            border-radius: calc(#{$b-radius} * 0.8);

            @if $input {
                border: 1px solid get-value-theme($theme, 'card-input-dark-border-color');
            } @else {
                border: 1px solid transparent;
            }

            text-align: center;
            font-size: map-get($map: $item-font-size, $key: $size);
            padding: map-get($map: get-value-theme($theme, 'item-types-card-body-padding'), $key: $size);
            transition: box-shadow 0.2s ease-in-out;
            @include card-body-box-shadow($card-input-box-shadow-color, 0.8);
        }

        &.valid,
        &.invalid {
            .bg-color {
                background-color: transparent !important;
                color: get-value-theme($theme, 'text-color') !important;
            }

            &::after {
                position: absolute;
                top: 0;
                bottom: 0;
                right: -24px;
                margin: auto;
                display: flex;
                justify-content: center;
                align-items: center;
                content: ' ';
                height: 18px;
                width: 18px;
                background-repeat: no-repeat;
                background-position: center;
                background-size: contain;
            }
        }

        &.valid {
            .card-body {
                @include card-body-box-shadow(
                    get-value-theme($theme, 'card-input-box-shadow-success-color'),
                    0,
                    3px
                );
            }

            &::after {
                background-image: url('~@/assets/images/icons/success.png');
                animation: blink 1s ease-in-out;
                transition: opacity ease-out 1s;
                opacity: 0;
            }
        }

        &.invalid {
            .card-body {
                @include card-body-box-shadow(
                    get-value-theme($theme, 'card-input-box-shadow-danger-color'),
                    0,
                    3px
                );
            }

            &::after {
                background-image: url('~@/assets/images/icons/fail.png');
                animation: blink 1s ease-in-out;
                transition: opacity ease-out 1s;
                opacity: 0;
            }
        }

        &.selected {
            background-color: #ccc;
        }

        pre {
            @include itim_regular;
            @include custom_scroll_bar;
            margin: 10px 0px;
            max-height: 100%;
        }
    }

    &.card--droppable {
        .card {
            &:not(.valid):not(.invalid) {
                .card-body > div {
                    &::after {
                        content: '\0000a0';
                        display: inline-block;
                        width: 0px;
                        height: map-get($map: $item-font-size, $key: $size);
                    }
                }
            }
        }
    }

    &.card--input-text {
        input {
            height: map-get($map: $item-font-size, $key: $size);
            font-size: map-get($map: $item-font-size, $key: $size);
        }
    }

    &.card--draggable {
        &:hover {
            cursor: pointer;
        }

        .dragging,
        .dropped {
            &::before {
                @include custom-dropcard-content(
                    $decreaseW:
                        map-get($map: $item-types-card-padding, $key: $size),
                    $decreaseH:
                        map-get($map: $item-types-card-padding, $key: $size),
                    $size: $size
                );
            }
        }
    }

    &.card--droppable {
        .card {
            .card-body {
                overflow: hidden;
                white-space: nowrap;
            }

            &:not(.valid):not(.invalid) {
                &::before {
                    @include custom-dropcard-content(
                        $decreaseW:
                            map-get($map: $item-types-card-padding, $key: $size),
                        $decreaseH:
                            map-get($map: $item-types-card-padding, $key: $size),
                        $size: $size
                    );
                }
            }
        }
    }
}

@mixin item($value) {
    &.texto {
        [class*='card--'],
        .draggshadow {
            width: $value;
            margin: auto;
        }
    }

    &.imagem {
        [class*='card--'] {
            .card-body {
                padding: 4px;
            }
        }
    }

    .card--display {
        &.card-inline-player {
            width: ($value + $inline-player-width) !important;
            .inline-player {
                max-width: $inline-player-width;
            }
        }
    }
}

@mixin custom-dropcard-content(
    $theme: 'fundamental',
    $decreaseW: 0.125rem,
    $decreaseH: 0.125rem,
    $border-radius-multiplier: 0.8,
    $size: 'default'
) {
    $b-radius: map-get(
        $map: item-types-card-border-radius($theme),
        $key: $size
    );
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    @if $decreaseW {
        width: calc(100% - #{$decreaseW + 0.2rem});
        height: calc(100% - #{$decreaseH + 0.2rem});
    }

    margin: auto;
    background-color: get-value-theme($theme, 'card-empty-color');
    border-radius: calc(#{$b-radius} * #{$border-radius-multiplier});
    box-shadow: inset 0px 9px 1px 1px get-value-theme($theme, 'card-empty-shadow-color');
    content: '';
    z-index: 1;
}

// Card
@mixin card-body-box-shadow($color, $amount: 0.66, $border-width: 4px) {
    box-shadow: inset 0px 0px 0px $border-width transparentize($color, $amount);
}

// Colors
/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
// Doc: https://www.sitepoint.com/building-linear-gradient-mixin-sass/
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}